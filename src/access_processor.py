"""
MS Access Data Processor - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Access —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID
"""

import csv
import os
import logging
from pathlib import Path
from typing import Dict, List, Set, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('processor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AccessDataProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Access —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, input_dir: str, correspondence_file: str, codes_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Args:
            input_dir: –ü–∞–ø–∫–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            correspondence_file: –§–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üí ID2
            codes_file: –§–∞–π–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º filename ‚Üí code
        """
        self.input_dir = Path(input_dir)
        self.correspondence_file = Path(correspondence_file)
        self.codes_file = Path(codes_file)
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.id_to_id2: Dict[str, str] = {}
        self.filename_to_code: Dict[str, str] = {}
        self.processed_id3: Set[str] = set()
        
        logger.info("‚úÖ AccessDataProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_correspondence_table(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üí ID2"""
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {self.correspondence_file}")
        
        try:
            with open(self.correspondence_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f, delimiter=';')
                for row in reader:
                    self.id_to_id2[row['id']] = row['ID2']
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.id_to_id2)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üí ID2")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {e}")
            raise
    
    def load_filename_codes(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ filename ‚Üí code"""
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–¥—ã —Ñ–∞–π–ª–æ–≤: {self.codes_file}")
        
        try:
            with open(self.codes_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f, delimiter=';')
                for row in reader:
                    self.filename_to_code[row['filename']] = row['code']
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.filename_to_code)} –∫–æ–¥–æ–≤ —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤ —Ñ–∞–π–ª–æ–≤: {e}")
            raise
    
    def get_input_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files = list(self.input_dir.glob('*.csv'))
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        return files
    
    def process_file(self, filepath: Path) -> List[Tuple[str, str]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ID3, ID4)
        """
        filename = filepath.name
        logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if filename not in self.filename_to_code:
            logger.warning(f"‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è —Ñ–∞–π–ª–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return []
        
        code = self.filename_to_code[filename]
        results = []
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f, delimiter=';')
                
                for row_num, row in enumerate(reader, 1):
                    original_id = row['ID']
                    
                    # –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ ID2
                    if original_id not in self.id_to_id2:
                        logger.warning(f"‚ö†Ô∏è  ID '{original_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
                        continue
                    
                    id2 = self.id_to_id2[original_id]
                    
                    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ ID3
                    id3 = f"{code}_{id2}"
                    
                    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if id3 in self.processed_id3:
                        logger.debug(f"‚è© ID3 '{id3}' —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                        continue
                    
                    # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ ID4
                    # ID4 = –ø–µ—Ä–≤—ã–µ 14 —Å–∏–º–≤–æ–ª–æ–≤ ID3 + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ original_id
                    id4 = id3[:14] + original_id[-4:]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    results.append((id3, id4))
                    self.processed_id3.add(id3)
                    
                    logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–ø–∏—Å—å {row_num}: {id3} ‚Üí {id4}")
            
            logger.info(f"‚úÖ –§–∞–π–ª {filename}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            raise
        
        return results
    
    def process_all_files(self, output_file: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π CSV
        
        Args:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        logger.info("\n" + "="*60)
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò")
        logger.info("="*60 + "\n")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_correspondence_table()
        self.load_filename_codes()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        input_files = self.get_input_files()
        
        if not input_files:
            logger.warning("‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"\nüìù –°–æ–∑–¥–∞—é –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter=';')
            writer.writerow(['ID3', 'ID4'])
            
            total_records = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for filepath in input_files:
                results = self.process_file(filepath)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for id3, id4 in results:
                    writer.writerow([id3, id4])
                    total_records += 1
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("="*60)
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(input_files)}")
        logger.info(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_records}")
        logger.info(f"  ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_path.stat().st_size} –±–∞–π—Ç\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    INPUT_DIR = 'data/input'
    CORRESPONDENCE_FILE = 'data/correspondence.csv'
    CODES_FILE = 'data/filename_codes.csv'
    OUTPUT_FILE = 'data/output/result.csv'
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = AccessDataProcessor(
        input_dir=INPUT_DIR,
        correspondence_file=CORRESPONDENCE_FILE,
        codes_file=CODES_FILE
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    processor.process_all_files(OUTPUT_FILE)


if __name__ == '__main__':
    main()

