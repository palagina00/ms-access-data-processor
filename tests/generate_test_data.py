"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MS Access Data Processor
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ .mdb —Ñ–∞–π–ª—ã –∏ CSV –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
"""

import csv
import random
import string
import os

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Access —Ñ–∞–π–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π CSV –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω pyodbc –∏ MS Access Driver

def generate_random_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '8d 7d 2c_Ah9h'"""
    part1 = ''.join(random.choices('0123456789abcdef', k=2))
    part2 = ''.join(random.choices('0123456789abcdef', k=2))
    part3 = ''.join(random.choices('0123456789abcdef', k=2))
    part4 = ''.join(random.choices(string.ascii_letters + string.digits, k=2))
    part5 = ''.join(random.choices(string.ascii_letters + string.digits, k=2))
    
    return f"{part1} {part2} {part3}_{part4}{part5}"


def generate_id2_from_id(original_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID2 –∏–∑ ID (–ø–µ—Ä–≤—ã–µ 9 —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)"""
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 9 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '8d 7d 2c_')
    prefix = original_id[:9]
    # –î–æ–±–∞–≤–ª—è–µ–º 'P000'
    return f"{prefix}P000"


def create_input_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏–º–∏—Ç–∞—Ü–∏—è .mdb)"""
    print("üìÅ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è input —Ñ–∞–π–ª–æ–≤
    input_dir = os.path.join('data', 'input')
    os.makedirs(input_dir, exist_ok=True)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    test_files = [
        ('18%Ese21.csv', 'AF21'),
        ('19%Ese22.csv', 'BG22'),
        ('20%Ese23.csv', 'CH23'),
        ('21%Ese24.csv', 'DI24'),
        ('22%Ese25.csv', 'EJ25')
    ]
    
    all_ids = []
    
    for filename, code in test_files:
        filepath = os.path.join(input_dir, filename)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        ids = [generate_random_id() for _ in range(20)]
        all_ids.extend(ids)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–∏–º–∏—Ç–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ .mdb)
        with open(filepath, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter=';')
            writer.writerow(['RecordID', 'ID', 'SomeData'])
            
            for idx, record_id in enumerate(ids, 1):
                writer.writerow([idx, record_id, f'Data_{idx}'])
        
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {filename} ({len(ids)} –∑–∞–ø–∏—Å–µ–π)")
    
    return all_ids, test_files


def create_correspondence_table(all_ids):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üí ID2"""
    print("\nüìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...")
    
    correspondence_file = os.path.join('data', 'correspondence.csv')
    
    with open(correspondence_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f, delimiter=';')
        writer.writerow(['id', 'ID2'])
        
        for original_id in all_ids:
            id2 = generate_id2_from_id(original_id)
            writer.writerow([original_id, id2])
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(all_ids)} –∑–∞–ø–∏—Å–µ–π")


def create_filename_codes(test_files):
    """–°–æ–∑–¥–∞–µ—Ç CSV —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º filename ‚Üí code"""
    print("\nüè∑Ô∏è  –°–æ–∑–¥–∞—é —Ñ–∞–π–ª filename_codes.csv...")
    
    codes_file = os.path.join('data', 'filename_codes.csv')
    
    with open(codes_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f, delimiter=';')
        writer.writerow(['filename', 'code'])
        
        for filename, code in test_files:
            writer.writerow([filename, code])
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–¥–æ–≤: {len(test_files)} –∑–∞–ø–∏—Å–µ–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üîß –ì–ï–ù–ï–†–ê–¢–û–† –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("="*60 + "\n")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    all_ids, test_files = create_input_files()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    create_correspondence_table(all_ids)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–¥–æ–≤
    create_filename_codes(test_files)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É output
    output_dir = os.path.join('data', 'output')
    os.makedirs(output_dir, exist_ok=True)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ ID –∑–∞–ø–∏—Å–µ–π: {len(all_ids)}")
    print(f"  ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(all_ids)} –∑–∞–ø–∏—Å–µ–π")
    print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ –∫–æ–¥–æ–≤: {len(test_files)}")
    print(f"\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  ‚Ä¢ data/input/ - –≤—Ö–æ–¥–Ω—ã–µ CSV —Ñ–∞–π–ª—ã (–∏–º–∏—Ç–∞—Ü–∏—è .mdb)")
    print(f"  ‚Ä¢ data/correspondence.csv - —Ç–∞–±–ª–∏—Ü–∞ ID ‚Üí ID2")
    print(f"  ‚Ä¢ data/filename_codes.csv - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ filename ‚Üí code")
    print(f"  ‚Ä¢ data/output/ - –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n")


if __name__ == '__main__':
    main()

